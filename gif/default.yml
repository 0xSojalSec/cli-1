# The configurations that used for the recording, feel free to edit them
config:

  # Specify a command to be executed
  # like `/bin/bash -l`, `ls`, or any other commands
  # the default is bash for Linux
  # or powershell.exe for Windows
  command: /bin/bash
  
  # Specify the current working directory path
  # the default is the current working directory path
  cwd: null
  
  # Export additional ENV variables
  env:
    recording: true
  
  # Explicitly set the number of columns
  # or use `auto` to take the current
  # number of columns of your shell
  cols: 100
  
  # Explicitly set the number of rows
  # or use `auto` to take the current
  # number of rows of your shell
  rows: 53
  
  # Amount of times to repeat GIF
  # If value is -1, play once
  # If value is 0, loop indefinitely
  # If value is a positive number, loop n times
  repeat: 0
  
  # Quality
  # 1 - 100
  quality: 50
  
  # Delay between frames in ms
  # If the value is `auto` use the actual recording delays
  frameDelay: auto
  
  # Maximum delay between frames in ms
  # Ignored if the `frameDelay` isn't set to `auto`
  # Set to `auto` to prevent limiting the max idle time
  maxIdleTime: auto
  
  # The surrounding frame box
  # The `type` can be null, window, floating, or solid`
  # To hide the title use the value null
  # Don't forget to add a backgroundColor style with a null as type
  frameBox:
    type: solid
    title: null
    style:
      boxShadow: none
      margin: 0px
  
  # Add a watermark image to the rendered gif
  # You need to specify an absolute path for
  # the image on your machine or a URL, and you can also
  # add your own CSS styles
  watermark:
    imagePath: null
    style:
      position: absolute
      right: 15px
      bottom: 15px
      width: 100px
      opacity: 0.9
  
  # Cursor style can be one of
  # `block`, `underline`, or `bar`
  cursorStyle: block
  
  # Font family
  # You can use any font that is installed on your machine
  # in CSS-like syntax
  fontFamily: "Monaco, Lucida Console, Ubuntu Mono, Monospace"
  
  # The size of the font
  fontSize: 13
  
  # The height of lines
  lineHeight: 1
  
  # The spacing between letters
  letterSpacing: 0
  
  # Theme
  theme:
    background: "transparent"
    foreground: "#afafaf"
    cursor: "#c7c7c7"
    black: "#232628"
    red: "#fc4384"
    green: "#b3e33b"
    yellow: "#ffa727"
    blue: "#75dff2"
    magenta: "#ae89fe"
    cyan: "#708387"
    white: "#d5d5d0"
    brightBlack: "#626566"
    brightRed: "#ff7fac"
    brightGreen: "#c8ed71"
    brightYellow: "#ebdf86"
    brightBlue: "#75dff2"
    brightMagenta: "#ae89fe"
    brightCyan: "#b1c6ca"
    brightWhite: "#f9f9f4"
  
# Records, feel free to edit them
records:
  - delay: 513
    content: "$ "
  - delay: 398
    content: i
  - delay: 265
    content: p
  - delay: 309
    content: i
  - delay: 198
    content: 'nfo '
  - delay: 309
    content: "\r\n"
  - delay: 18
    content: "Usage: ipinfo <cmd> [<opts>] [<args>]\r\n\r\nCommands:\r\n  <ip>        look up details for an IP address, e.g. 8.8.8.8.\r\n  <asn>       look up details for an ASN, e.g. AS123 or as123.\r\n  myip        get details for your IP.\r\n  bulk        get details for multiple IPs in bulk.\r\n  summarize   get summarized data for a group of IPs.\r\n  prips       print IP list from CIDR or range.\r\n  grepip      grep for IPs matching criteria from any source.\r\n  login       save an API token session.\r\n  logout      delete your current API token session.\r\n  version     show current version.\r\n\r\nOptions:\r\n  General:\r\n    --token <tok>, -t <tok>\r\n      use <tok> as API token.\r\n    --help, -h\r\n      show help.\r\n\r\n  Outputs:\r\n    --field, -f\r\n      lookup only a specific field in the output.\r\n      field names correspond to JSON keys, e.g. 'hostname' or 'company.type'.\r\n\r\n  Formats:\r\n    --pretty, -p\r\n      output pretty format.\r\n    --json, -j\r\n      output JSON format.\r\n    --csv, -c\r\n      output CSV format.\r\n\e]0;$ "
  - delay: 5000
    content: "exit\r\n"
